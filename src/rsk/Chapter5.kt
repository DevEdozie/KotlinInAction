package rsk

import java.lang.NullPointerException

data class Person(val name:String,val age:Int)


fun findTheOldest(people:List<Person>){
    var maxAge = 0
    var theOldest:Person? = null
    for(person in people){
        if(person.age > maxAge){
            maxAge = person.age
            theOldest = person
        }
    }
    println(theOldest)
}

fun findTheYoungest(people: List<Person>){
    var minAge = 0
    var theYoungest:Person? = null
    var maxAge = 0
    var theOldest:Person? = null
    for(person in people){
        if(person.age > maxAge){
            maxAge = person.age
            theOldest = person
        }
        if(person.age < maxAge){
            minAge = person.age
            theYoungest = person
        }
    }
    println(theYoungest)
}

fun findTheThreeOldest(people: List<Person>){
    var maxNumOne = 0
    var maxNumTwo = 0
    var maxNumThree = 0
    var theFirstOldest:Person? = null
    var theSecondOldest:Person? = null
    var theThirdOldest:Person? = null
    for(person in people){
        if(person.age > maxNumOne){
            maxNumOne = person.age
            theFirstOldest = person
        }
        if(person.age < maxNumOne){
            maxNumTwo = person.age
            theSecondOldest = person
        }
        if(person.age < maxNumTwo){
            maxNumThree = person.age
            theThirdOldest = person
        }
    }
    println("First: $theFirstOldest")
    println("Second: $theSecondOldest")
    println("Third: $theThirdOldest")

}

fun main(args: Array<String>) {
   val people = listOf(Person("Michael",20), Person("Judith",23), Person("Kamsi",11))
////    findTheOldest(people)
////    findTheYoungest(people)
////    findTheThreeOldest(people)
//    var max = people.minBy { it.age }
//    println(max)
//    val sum = {x:Int,y:Int -> x + y}
//    val reply = {message:String -> message}
//    println(sum(1,3))
//    println(reply("Hello, this is a lambda function"))
//    run { println(42)}
//   val p =  people.maxBy{p:Person -> p.age}
//    println(p)
    //val names = people.joinToString(separator = " ",transform = {p:Person -> p.name})
//    val names = people.joinToString(" ") {p:Person -> p.name}
//    println(names)
    //Parameter type explicitly written
//    println(people.maxBy { p:Person -> p.age })
//    //Parameter type inferred
//    println(people.maxBy { p -> p.age })
//    //using the default parameter name "it" is an autogenerated parameter name
//    println(people.maxBy { it.age })
//    //the default name is generated only if you don't specify the argument name explicitly
//    val getAge = {p:Person -> p.age}
//    println(people.maxBy(getAge))
    val sum = {x:Int , y:Int ->
        println("Computing the sum of $x and $y")
        x + y
    }
    println(sum(1,2))
    val product = {x:Int,y:Int ->
        println("Computing the product of $x and $y")
        x * y
    }
    println(product(1,2))


}